"""Utilities for dealing with DiffCommits."""

from __future__ import unicode_literals

from itertools import chain

from reviewboard.scmtools.core import UNKNOWN


def get_file_exists_in_history(validation_info, repository, parent_id, path,
                               revision, base_commit_id=None, request=None):
    """Return whether or not the file exists, given the validation information.

    Args:
        validation_info (dict):
            Validation metadata generated by the
            :py:class:`~reviewboard.webapi.resources.validate_diffcommit.
            ValidateDiffCommitResource`.

        repository (reviewboard.scmtools.models.Repository):
            The repository.

        parent_id (unicode):
            The parent commit ID of the commit currently being processed.

        path (unicode):
            The file path.

        revision (unicode):
            The revision of the file to retrieve.

        base_commit_id (unicode, optional):
            The base commit ID of the commit series.

        request (django.http.HttpRequest):
            The HTTP request from the client.

    Returns:
        bool:
        Whether or not the file exists.
    """
    while parent_id in validation_info:
        entry = validation_info[parent_id]
        tree = entry['tree']

        if revision == UNKNOWN:
            for removed_info in tree['removed']:
                if removed_info['filename'] == path:
                    return False

        for added_info in chain(tree['added'], tree['modified']):
            if (added_info['filename'] == path and
                (revision == UNKNOWN or
                 added_info['revision'] == revision)):
                return True

        parent_id = entry['parent_id']

    # We did not find an entry in our validation info, so we need to fall back
    # to checking the repository.
    return repository.get_file_exists(path, revision,
                                      base_commit_id=base_commit_id,
                                      request=request)


def exclude_ancestor_filediffs(filediffs):
    """Exclude all ancestor FileDiffs from the given list and return the rest.

    A :pyclass:`~reviewboard.diffviewer.models.filediff.FileDiff` is considered
    an ancestor of another if it occurs in a previous commit and modifies the
    same file.

    As a result, only the most recent (commit-wise) FileDiffs that modify a
    given file will be included in the result.

    Args:
        filediffs (list of reviewboard.diffviewer.models.filediff.FileDiff):
            The FileDiffs to filter.

    Returns:
        list of reviewboard.diffviewer.models.filediff.FileDiff:
        The FileDiffs that are not ancestors of other FileDiffs.
    """
    ancestor_pks = {
        ancestor.pk
        for filediff in filediffs
        for ancestor in filediff.get_ancestors(minimal=False,
                                               filediffs=filediffs)
    }

    return [
        filediff
        for filediff in filediffs
        if filediff.pk not in ancestor_pks
    ]
